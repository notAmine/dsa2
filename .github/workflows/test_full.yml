name: test_full

###  https://github.com/arita37/awesome-actions#static-analysis

on:
  push:
    branches:
      - run_train
      - multi
      - benchmark
      - colab


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
   
    - name: Set up Python 3.6.*
      uses: actions/setup-python@v1
      with:
        python-version: 3.6.*
      
    - name: Install pipenv
      uses: dschep/install-pipenv-action@v1
      

    ##### Log Start  ######################################################

    #- name: ssh_gen
    #  uses: webfactory/ssh-agent@v0.2.0
      #with:
      #  ssh-private-key: ${{ secrets.GIT_RSA }}
                
    - name: log_start
      run: |
           ls .
           # cd /home/runner/work/mlmodels/  && git clone git@github.com:arita37/mlmodels_store.git  &&  ls && pwd
           # cd /home/runner/work/mlmodels/mlmodels/

    ########################################################################
                

    # - name: log_start
    #  run: |
    #       cd /home/runner/work/mlmodels/  && git clone git@github.com:arita37/mlmodels_store.git  &&  ls && pwd
    #       cd /home/runner/work/mlmodels/mlmodels/
            

    #- uses: actions/cache@v1
    #  id: cache
    #  with:
    #    path: ~/.cache/pip
    #    key: ${{ runner.os }}-pip-${{ hashFiles('**/install/requirements.txt') }}
    #    restore-keys: |
    #      ${{ runner.os }}-pip-
   


    - name: Cache pipenv virtualenv
      id: cache-pipenv
      uses: actions/cache@v1
      with:
        path: /opt/hostedtoolcache/Python/
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/install/py36.txt') }}


          

    - name: Install numpy
      if: steps.cache-pipenv.outputs.cache-hit != 'true'
      run: pip install numpy==1.18.2   pillow==6.2.1  scipy
      

    - name: Install repo requirements  1
      if: steps.cache-pipenv.outputs.cache-hit != 'true'
      run: |
           pip install -r   install/py36.txt
           pip install pyod==0.8.5

    - name: Install repo requirements   2
      if: steps.cache-pipenv.outputs.cache-hit != 'true'
      run:  |
        ls .
        #pip install -r install/requirements_fake.txt

    #- name: Install repo
    #  run: pip install -e . -r install/py36.txt  --no-deps




    # - name: log_start
    #  run: ml_test --do log_remote_start


    - name: test_import
      run: |
           python -c "import core_run;   print(core_run)"
           python -c "import os, numpy ; print(os)"
           # python -c "import tensorflow, torch ; print(tensorflow); print(torch)"

    ########  Test running 
    - name: run_mlflow
      run: chmod -R 777 . && ztest/test_mlflow.sh   # 2>&1 | tee   /home/runner/work/mlmodels/mlmodels_store/log_import/log_optim.py

      
    ########  Test running 
    #- name: run_all
    #  run: chmod -R 777 . && ztest/run_full.sh   # 2>&1 | tee   /home/runner/work/mlmodels/mlmodels_store/log_import/log_optim.py


    - name: ipython example/test_keras_vaemdn.py  train
      continue-on-error: true
      run:  |
            ipython example/test_keras_vaemdn.py  train


    - name: ipython example/titanic_gefs.py  train
      continue-on-error: true
      run:  |
            ipython example/titanic_gefs.py  train


    - name: python toutlier.py  train_test
      # continue-on-error: true
      run:  |
            python toutlier.py  train_test


    - name: python  example/test_hyperopt.py  hyperparam  --ntrials 1  
      # continue-on-error: true
      run:  |
            python  example/test_hyperopt.py  hyperparam  --ntrials 1 


    - name: python example/test_mkeras.py  train    --config config1
      # continue-on-error: true
      run:  |
            ipython example/test_mkeras.py  train
            ipython example/test_mkeras.py  predict


    - name: python example/test_mkeras_dense.py  train    --config config1
      # continue-on-error: true
      run:  |
            ipython example/test_mkeras_dense.py  train
            ipython example/test_mkeras_dense.py  predict




    - name: python   example/test_automl.py  train   
      continue-on-error: true
      run:  |
            python   example/test_automl.py  train       --nsample 200
            python   example/test_automl.py  predict     --nsample 200 


    - name: python example/regress/regress_salary.py
      continue-on-error: true
      run:  |
            python example/regress/regress_salary.py  train   --nsample 1000    
            python example/regress/regress_salary.py  predict  --nsample 1000 
            python example/regress/regress_cardif.py  train   --nsample 1000


    - name: python example/regress/regress_airbnb.py   
      continue-on-error: true
      run:  |
            python example/regress/regress_airbnb.py  train   --nsample 20000  
            python example/regress/regress_airbnb.py  predict  --nsample 5000


    - name: python tseries.py  train      --config  config1 
      continue-on-error: true
      run:  |
            python tseries.py  train      --config  config1


    - name: python example/classifier/classifier_income.py 
      continue-on-error: true
      run:  |
            python example/classifier/classifier_income.py  train    --nsample 1000
            python example/classifier/classifier_income.py  predict  --nsample 1000




# python example/regress/regress_salary.py  train   --nsample 1000
# python example/regress/regress_salary.py  predict  --nsample 1000

# python example/regress/regress_cardif.py  train   --nsample 1000


# python example/regress/regress_airbnb.py  train   --nsample 20000
# python example/regress/regress_airbnb.py  predict  --nsample 5000



# python example/classifier/classifier_income.py  train    --nsample 1000   ;
# python example/classifier/classifier_income.py  predict  --nsample 1000   ;


### HyperOpt optuna testing
# python  example/test_hyperopt.py  hyperparam  --ntrials 1

### Keras model test
# python example/test_mkeras.py  train    --config config1


### Time Series Prediction
# python tseries.py  train      --config  config1
         

    #- name: ml_test_function
    #  run: ml_test --do test_functions    2>&1 | tee  cd /home/runner/work/mlmodels/mlmodels_store/log_import/log_functions.py




    #- name: ml_test
    #  run: ml_test
      
        

    #- name: log_gitcommit
    #  run: |
    #       ml_test --do log_remote_push --name test_fast_linux

# https://ianwhitestone.work/AWS-Serverless-Deployments-With-Github-Actions/
#
#
#
#
