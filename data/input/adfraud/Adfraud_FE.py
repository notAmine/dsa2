# -*- coding: utf-8 -*-
"""Adfraud_FE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RL00DNHm98rJCqFnKvUY84X_MmMRcTnn
"""

import pandas as pd
import numpy as np
import gc
import copy

dtypes = {'ip': np.uint32, 'app': np.uint16, 'device': np.uint8, 'os': np.uint8, 'channel': np.uint8, 'is_attributed': np.bool}
df = pd.read_csv('raw/train_sample.csv', sep=',', dtype=dtypes, parse_dates=['click_time', 'attributed_time'])
df.head()

df.drop(columns=["attributed_time"], inplace=True)

df = copy.deepcopy(df)

# Let's see on which hour the click was happend
df['day']  = df.click_time.dt.day.astype('uint8')
df['hour'] = df.click_time.dt.hour.astype('uint8')
df['minute'] = df.click_time.dt.minute.astype('uint8')
df['second'] = df.click_time.dt.second.astype('uint8')
df.head()

# Number of clicks for each ip-app combination
df1 = df[['ip','app', 'channel']].groupby(by=['ip', 'app'])[['channel']].count().reset_index().rename(index=str, columns={'channel': 'ip_app_count'})
df = df.merge(df1, on=['ip','app'], how='left')
del df1
gc.collect()
df.head()

# Number of clicks for each ip-app-os combination
df1 = df[['ip','app', 'os', 'channel']].groupby(by=['ip', 'app', 'os'])[['channel']].count().reset_index().rename(index=str, columns={'channel': 'ip_app_os_count'})
df = df.merge(df1, on=['ip','app', 'os'], how='left')
del df1
gc.collect()
df.head()

def generateAggregateFeatures(df, aggregateFeatures):
    for spec in aggregateFeatures:
        print("Generating aggregate feature {} group by {}, and aggregating {} with {}".format(spec['name'], spec['groupBy'], spec['select'], spec['agg']))
        gp = df[spec['groupBy'] + [spec['select']]] \
            .groupby(by=spec['groupBy'])[spec['select']] \
            .agg(spec['agg']) \
            .reset_index() \
            .rename(index=str, columns={spec['select']: spec['name']})
        df = df.merge(gp, on=spec['groupBy'], how='left')
        del gp
        gc.collect()
     
    return df

aggregateFeatures = [
    # Number of clickes for ip-app
    {'name': 'ip-app-count', 'groupBy': ['ip', 'app'], 'select': 'channel', 'agg': 'count'}, 
    # Number of clicks for each ip-app-os
    {'name': 'ip-app-os-count', 'groupBy': ['ip','app', 'os'], 'select': 'channel', 'agg': 'count' },
    # Number of clicks for ip-day-hour
    {'name': 'ip-day-hour-count', 'groupBy': ['ip','day','hour'], 'select': 'channel', 'agg': 'count'},
    # Number of clicks for ip-app-day-hour
    {'name': 'ip-app-day-hour-count', 'groupBy': ['ip','app','day','hour'], 'select': 'channel', 'agg': 'count'},
    # Clicks variance in day, for ip-app-channel
    {'name': 'ip-app-channel-var', 'groupBy': ['ip','app','channel'], 'select': 'day', 'agg': 'var'},
    # Clicks variance in hour, for ip-app-os
    {'name': 'ip-app-os-var', 'groupBy': ['ip','app','os'], 'select': 'hour', 'agg': 'var'},
    # Clicks variance in hour, for ip-day-channel
    {'name': 'ip-day-channel-var', 'groupBy': ['ip','day','channel'], 'select': 'hour', 'agg': 'var'},
    # Mean clicks in an hour, for ip-app-channel
    {'name': 'ip-app-channel-var', 'groupBy': ['ip','app','channel'], 'select': 'hour', 'agg': 'mean'},
    # How popular is the app in channel?
    {'name': 'app-popularity', 'groupBy': ['app'], 'select': 'channel', 'agg': 'count'},
    # How popular is the channel in app?
    {'name': 'channel-popularity', 'groupBy': ['channel'], 'select': 'app', 'agg': 'count'},
    # Average clicks on app by distinct users; is it an app they return to?
    {'name': 'avg-clicks-on-app', 'groupBy': ['app'], 'select': 'ip', 'agg': lambda x: float(len(x)) / len(x.unique())}
]
df = generateAggregateFeatures(df, aggregateFeatures)
df.head()

# Time before next click
def generateNextClickFeatures(df, nextClickAggregateFeatures):
    for spec in nextClickAggregateFeatures:
        feature_name = '{}-next-click'.format('_'.join(spec['groupBy']))   
        df[feature_name] = df[spec['groupBy'] + ['click_time']].groupby(['ip']).click_time.transform(lambda x: x.diff().shift(-1)).dt.seconds
    return df

nextClickAggregateFeatures = [
    {'groupBy': ['ip', 'channel']},
    {'groupBy': ['ip', 'os']}
]

df = generateNextClickFeatures(df, nextClickAggregateFeatures)
df.head()



